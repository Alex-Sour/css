#!/bin/bash

# This workflow is intended to help catch accesibility violations by running axe on examples on documentation.
# Developers frequently copy and paste examples from documentation so it's important to ensure the examples are accessible.
# Learn more about @axe-core/cli here: https://github.com/dequelabs/axe-core-npm/tree/develop/packages/cli

# See which files were modified, excluding removed files
git diff --name-only --diff-filter=d origin..HEAD > files.txt
relevant_nav_paths=()

# Get the paths of pages we care about
while IFS= read -r file
do
  if [[ $file == docs/content/components/* ]] || [[ $file == docs/content/utilities/* ]] ; then
    if [[ $file == docs/content/components/index.md ]] || [[ $file == docs/content/utilities/index.md ]] ; then
      echo "Skipping $file"
      echo "*"
      echo "*"
      continue
    else
      prefix="docs/content"
      suffix=".md"
      doc_path=${file#"$prefix"}
      doc_path=${doc_path%"$suffix"}
      relevant_nav_paths+=($doc_path)
    fi
  else
    echo "Skipping $file"
    echo "*"
    echo "*"
  fi
done < files.txt

skip_axe_message = "Skipping axe testing because there were no changes to documentation pages we care about"

# Early return if there are no pages to test.
if [ ${#relevant_nav_paths[@]} -eq 0 ]; then
  echo $skip_axe_message
  exit
else
  echo "Verify whether the check is part of starting point violation"
  echo "*"
  echo "*"
fi

# https://stackoverflow.com/a/8574392
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# Starting point violations
# DO NOT ADD TO THIS LIST!
needs_to_be_fixed=(
  /components/autocomplete
  /components/avatars
  /components/box
  /components/buttons
  /components/header
  /components/markdown
  /components/progress
  /components/select-menu
  /components/labels
  /components/timeline
  /components/toasts
  /utilities/flexbox
  /utilities/layout 
)

echo "############################################################"
echo "WARNING"
echo "The following paths are excluded from this automated accessibility check."
echo "They contain known violations and should be addressed:"
printf '%s\n' "${needs_to_be_fixed[@]}"
echo "############################################################"

# Generate doc urls 
doc_urls=()
for i in "${relevant_nav_paths[@]}"; 
do
  if containsElement "${i//\"/}" "${needs_to_be_fixed[@]}"; then
    continue
  else
    doc_url="http://localhost:8000$i"
    doc_url="${doc_url//\"/}"
    doc_urls+=($doc_url)
  fi
done

if [ ${#doc_urls[@]} -eq 0 ]; then
  echo $skip_axe_message
  exit
else
  echo 
  npm install -g @axe-core/cli
  # https://github.com/dequelabs/axe-core-npm/tree/develop/packages/cli
  # We exclude rules that depend on full page context.
  axe ${doc_urls[@]} --include "iframe" --disable html-has-lang,frame-title,page-has-heading-one,region,color-contrast,landmark-unique,landmark-one-main --show-errors
fi
